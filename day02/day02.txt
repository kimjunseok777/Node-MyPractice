

) MySQL :

        oracle 과 더불어 세계에서 가장 널리 쓰이는 RDBMS 중 하나이다
        -->  가장 먼저 배워야하는 것은 제약조건 (스키마) 이다 (데이터가 저장되기 위해서 검사하는 것이다)
        -->  sql 은 대소문자 구분이 없다  -->  대문자, 소문자 마음대로 쓰면 된다


            ) 데이터타입

                    1. 숫자타입
                        - 정수형 : int
                        - 소수형 : float

                    2. 문자타입
                        - char : 문자  -->  ex) A, a, B, b 같은 한단어, 문자를 가리킴
                        - varchar : 단어, 문장  -->  ex) 사과, 안녕하세요 같은 단어 또는 문장을 가리킴
                        - text : 긴 글

                        문자타입을 정해줄 때는 괄호 안에 숫자를 적어줘야한다
                        ex) varchar( 100 )  -->  100byte 를 허용하겠다는 의미이다  -->  100byte 넘어가는 글자가 들어오면, 삽입 이상 현상을 일으킨다
                                                        -->  보통, 영어는 한글자에 1byte 이고, 한글은 한글자에 3byte 이다  -->  즉, 100byte 는 33 글자 정도까지 된다
                                                        -->  byte : 컴퓨터에 저장할 수 있는 용량 단위이다
                                                                1kb  -->  1024byte
                                                                1mb  -->  1024kb
                                                                1gb  -->  1024mb
                    
                    3. 날짜와 시간
                        - date
                        - dateTime
                        - timeStamp

                        백엔드가 시간 데이터를 저장할 때, 우리나라 시간 (KST) 을 저장하는 것이 아니라 세계협정시 (UTC+00) 로 저장한다
                        UTC+00 (세계협정시)  -->  여기서 우리나라 시간은 9를 더한 시간이다
                        UTC+09 (KST)  -->  우리나라 시간이다

                        1970년 1월 1일 자정을 기준으로, 몇 ms 가 지나갔는지를 전달해준다 (백엔드가 프론트엔드에게 전달)
                        -->  시간 데이터를 이렇게 전달하는 이유는, 우리나라에서 개발을 했지만, 외국에서도 어플을 쓸 수도 있기 때문이다
                        -->  어느 국가든 시간을 일치시켜주기 위해서 UTC 를 사용할는 것이다 (우리나라 뿐만 아니라, 다른 나라에서 사용할 때도 서비스를 지원해야하기 때문이다)
                    
                    4. enum
                        열거형 데이터라고 한다  -->  열거되어 있는 데이터 중 하나여야 한다
                        -->  ex) enum( 'f' , 'm' )  -->  f 또는 m 중에 하나여야한다 (제약조건을 거는 것이다)

                    5. json
                        실제로 자바스크립트 객체를 저장한다


            ) 제약조건 (스키마)

                    1. NOT NULL : null 을 저장할 수 없음 (required)  -->  값이 반드시 들어가야한다, 데이터가 비어있으면 안된다

                    2. UNIQUE : 중복되는 값을 저장할 수 없음  -->  ex) 회원가입을 하는데, 같은 이메일 값이 있으면 안된다

                    3. DEFAULT : 기본값을 설정할 수 있다  -->  값을 넣지 않아도, 기본으로 설정되는 값이다
                                                                                   -->  ex) id bigint primary key auto_increment  (id값은 자동으로 1씩 증가하는 값이라고 기본값을 정해준 것)

                    4. PK , FK : PK (Primary Key) , FK (Foreign Key)  -->  "대표키" 와 "외래키" 라고 한다

                        - Primary Key (대표키) : 다른 데이터와 구분되는 값 중 가장 대표되는 값이다 (고유번호로 많이 사용한다)
                                                                 키중, 가장 데이터를 찾기 쉬운 값이 PK 가 되는 것이다  -->  여러 key 중 가장 대표되는 key

                        - Foreign Key (외래키) : 다른 데이터가 저장되어 있는 공간을 연결하는 역할을 하는 key 이다
                                                                 다른 테이블과 관계를 결정하는 키, cascade (종속) 를 통한 이상현상 방지

                        외래키 ex)
                        [표 1]  --  회원정보
                        id  name
                        1   김준석

                        [표 2]  --  상품정보
                        id  name  price
                        1   키보드  30,000

                        [표 3]  --  구매내역
                        id  product
                        2   김준석

                        -->  "김준석이 키보드를 샀다"  -->  이런식으로 데이터를 저장하는 것은 비효율 적이다
                        -->  id 로 저장해서, 다른 표들로 가서 일치하는 id 가 있는 정보로 데이터를 저장하는 것이 좋다 (id 번호로 찾는 것이 좋다)

                        ==>  보통 구매내역은 product 에 PK 가 들어가고, 회원정보에 PK 가 들어간다
                        ex)
                        [표 3]
                             id          product(PK)    user(PK)   -->  이런식으로 PK 정해서 저장한다
                        1(김준석)      2(키보드)              1

                        그런데 만약에, 이 회원이 회원탈퇴를 했다고 생각해보자  -->  보통은 회원 정보를 90일 정도 보관했다가 데이터를 삭제한다
                        하지만, 구매내역 데이터는 삭제하면 안된다  -->  구매내역에 관한 데이터들은 다 돈이되기 때문이다
                        (데이터는 곧 돈이다  -->  하반기 결산 같은 거 할 때 다 필요한 데이터)

                        -->  이럴 때는 FK(외래키) 로 연결을 시켜놓으면 업데이트나 수정 같은 것이 자동으로 같이 이뤄진다
                        탈퇴 ex)
                        [표 3]
                             id          product(PK)    user(PK)
                        1(김준석)      2(키보드)            null  -->  탈퇴했기 때문에 회원정보는 null 이 뜨고, 결산에 중요한 정보인 id 나 product 는 남아있는 것이다

                        -->  즉, 외래키의 가장 큰 장점은 테이블과 테이블의 관계를 지어줌으로써 업데이트나 삽입이 자동으로 이뤄진다
                        -->  이상현상이 방지가 된다  -->  user 가 null 인것도 데이터 가져와, 또는 user 가 null 인것은 따로 분리해서 가져와 등등 (에러가 나지 않게끔 한다)


===================================================================================================


) 데이터베이스를 만드는 방법

        ) 모델링(개논물)  -->  데이터베이스를 모델링 하는 방법 ( 개념 , 논리 , 물리 모델링 )

            - 개념 모델링 : 어떤 데이터를 저장할건지에 대해서 정한다  -->  어떤 데이터를 저장할 것이고, 데이터를 어떻게 묶을 것인지 정할 수 있다
                ex) 회원정보 , 상품정보 , 구매내역 , 결제수단 , 배송상태 ... 등등  -->  구매내역(결제수단 , 배송상태)  -->  이렇게 데이터를 묶을 수도 있는 것이다

            - 논리 모델링 : 데이터끼리의 관계를 추상화하고, 스키마를 형성한다
                ex) 회원정보에는 어떤 데이터를 넣지?  -->  이름 : 문자열  /  주소 : 문자열  /  핸드폰번호 : 문자열
                                                              상품정보  -->  상품명 : 문자열  /  가격 : 숫자
                                                              구매내역  -->  회원정보 PK  /  상품정보 PK  /  결제수단 PK  /  배송상태 PK

            - 물리 모델링 : 실제로 DBMS 에 저장할 수 있도록 SQL 로 옮기는 작업
                ex) create table tb_purchase_histories (  -->  표형태로 되어있어서  " table "  이라고 하는 것이다
                    id bigint pk,
                    userId bigint,
                    productId bigint,
                    foreign key (userId) references tb_user(id)  -->  tb_user 의 id 와 userId 를 관계지어 놓겠다는 의미이다 (나중에 외래키 문법에서 배운다)
                )
                -->  이런식으로 하면 데이터베이스에 저장되는 공간이 생기는 것이다


===================================================================================================


) SQL  -->  ( DML , DDL , DCL )

        DML (데이터 조작어)  -->  실제 데이터를 관리 (데이터 조회, 갱신, 생성 ... 등등) 명령어
            - SELECT
            - INSERT
            - UPDATE
            - DELETE

        DDL (데이터 정의어)  -->  데이터 베이스를 관리하는 명령어 (생성, 수정, 삭제 ... 등등  -->  table 을 생성하거나 수정 등등)
                                           -->  DML 보다 더 큰 개념
            - CREATE
            - ALTER
            - DROP
            - RENAME
            - TRUNCATE

        DCL (데이터 제어어)  -->  데이터 베이스에 접근 가능한 권한을 관리하는 명령어
                                           -->  ex) 얘는 이 db 에 "쓰기" 권한밖에 없어, 얘는 이 db 에 "읽기" 권한밖에 없어 ... 등등

        ==>  이중에서 우리는 DML 과 DDL 을 공부해볼 것이다


===================================================================================================


) SQL 명령어


        - SELECT
                데이터를 조회할 때 사용하는 명령어

                ex) select 컬럼명 from 테이블명  -->  여기서 컬럼명은 create table 할 때 만들었던 id, userId, productId ... 같은 것들을 뜻한다
                                                                       -->  컬럼명 : 데이터를 분류하는 이름 (id, userId ... 등등)

                ex) select name, phone, address from tb_user  -->  내가 원하는 테이블에 원하는 정보만 가져올 수 있다
                ex) select * from tb_user  -->  이 tb_user 테이블의 모든 컬럼을 다 가져온다  ***
                ex) select * from tb_user where  컬럼명  연산자값  -->  특정 조건에 만족하는 컬럼명만 가져올 수 있다  -->  where age >= 20 이런식으로 사용

                예를 들어, 클리이언트가 백엔드서버에 특정 상품의 정보를 요청했음  -->  fetch("/api/product/3")
                -->  backend  -->  3  -->  db  -->  select * from tb_user where id = 3;  -->  tb_user 에서 id 가 3인 데이터를 가져올 수 있음

        ---------------------------------------------------------------------------------------------------------------------------------------

        - 테이블 생성
                ex)
                create table 테이블명 (
                    [컬럼명] [데이터 타입] [옵션],  -->  이렇게 컬럼명을 정해준 다음에는 콤마 (,) 찍어야한다  -->  마지막 거에는 콤마 찍으면 안된다  ***
                    id bigint pk
                );  -->  항상 sql 문은 마지막에 끝났다고 알려줄 수 있는 세미콜론을 반드시 찍어야한다

                ) 주의사항
                    1. 하나의 컬럼을 작성하면 끝에 , 를 붙여줘야한다
                    2. 마지막 컬럼을 작성하면 끝에 , 를 붙여서는 안된다
                    3. 모든 SQL 은 끝나는 지점에 세미콜론 ; 을 붙여줘야한다

        ---------------------------------------------------------------------------------------------------------------------------------------

        - 데이터베이스 생성 방법
                ex) create database 데이터베이스명;  -->  데이트 베이스 만들기  -->  최상단(데이터베이스) 안에 테이블이 포함되어있는 상태이다
                       use 데이터베이스명;  -->  데이터베이스 사용하기

        ---------------------------------------------------------------------------------------------------------------------------------------

        - INSERT
                ex) INSERT INTO 테이블명 ( 컬럼명, 컬럼명, ... ) values ( 값, 값, ... )  -->  컬럼명 순서대로 값 순서대로 들어가는 것이다
                ex) INSERT INTO tb_user (name, phone) values ('김준석', '010-1234-1234')

                ) 주의사항
                    1. 제약조건을 반드시 지켜야한다
                    2. default 값이 있는 경우 생략할 수 있다  -->  값을 정해주거나 넣지 않아도, 값이 자동으로 들어간다
                                                                                      -->  테이블에서 id 정해줄 때 auto_increment 로 기본값 설정해줬으니, insert 할 때 따로 id 만들이 안아도 되는 것이다


===================================================================================================


이제 MySQL Workbench 를 열고 실제로 데이터베이스 만들어보자

        작업 영역에서 왼쪽에 보이는 SCHEMAS 부분이 데이터베이스이다

        실행시키는 것은 ctrl + enter 이다  -->  실행시키고 싶은 코드에서 해줘야한다

        뒤로가기 : ctrl + z  /  앞으로가기 : ctrl + y


        ) MySQL 주석 :

            한줄주석  -->  # , -- , -- --
            여러줄 주석  -->  /*  */


===================================================================================================
