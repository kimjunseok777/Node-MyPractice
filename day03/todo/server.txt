

) ORM
        Object Relational Mapping
        객체랑 관계형 데이터베이스랑 연결시켜주는 것이다 (sql 대신에 자바스크립트 객체를 쓰면, sql 로 자동으로 변환해주는 것이다)
        -->  sql 을 몰라도 개발할 수 있게 도와주는 친구이다
        객체와 관계형 DB를 맵핑
        SQL 없이도 간단한 쿼리를 작성할 수 있다
        생산성 때문에 많이 사용한다

        단점 : 복잡한 SQL 은 작성할 수 없다
                  불필요한 쿼리가 발생할 수 있다 (최적화가 되지 않는다)
            
        종류 :
            - sequelize : express 랑 가장 많이 사용하는 orm (하지만, 요즘은 express 많이 사용 안한다  -->  옛날 거다)
            - typeorm : nest-js 랑 가장 많이 사용하는 orm, javascript 기반 백엔드에서는 가장 흔히 사용되는 orm
            - prisma : front-end (next-js) 에서 권장하고 있는 orm  -->  NextJs 는 풀스택 프레임워크이다
            - drizzle-orm : 요즘 가장 주목받고 있는 orm

            ==>  우리가 사용해볼 ORM 의 종류는 sequelize 사용할 것이다

        npm i sequelize sequelize-cli
        npx sequelize init


) Cookie
        client 에 웹 브라우저에 저장되는 key , value 로 이루어진 작은 데이터 파일
        -->  개발자 도구에서 Application 들어가보면 Storage , Cookies 있는 것 확인할 수 있다
        http-only 라는 옵션을 통해서 외부에서의 접근을 차단할 수 있고
        client 에서 따로 설정하지 않아도 자동으로 server 와 주고 받기가 가능하다

        express 에서 cookie 를 사용하려면 cookie-parser 를 설치해야한다
        npm i cookie-parser


) JWT
        Json Web Token  -->  토큰은 작은 값, 조그마한 무언가 ... 등등 이라는 뜻이다
        json 을 암호키로 암호화하여 소프트웨어 간 주고 받을 수 있는 문자열로 이루어진 값
        ex)
        const token = jwt.sign({
            userId : ?
            userToken : ?
            ... 즉, 객체를 넣으면 된다

            aud: "kjs",
            expiredIn: "30m"
        },  암호화키,  옵션)

        npm i jsonwebtoken


) BCRYPT
        단방향 암호화 라이브러리
        -->  단반향이기에 복구화가 불가능 하다  -->  알고리즘이나 키로 한번 묶어주면 복구화가 안된다  -->  즉, 원래의 값을 찾을 수 없다
        회원가입시 사용자가 입력한 비밀번호를 암호화하여 바교만 가능하도록한 라이브러리 (개발자들도 비밀번호를 알 수 없다)

        npm i bcrypt


==>  이렇게 하면 로그인을 만들 수 있는 최소한의 조건을 갖춘 것이다 (ORM , Cookie , JWT , BCRYPT)


===================================================================================================


** 경로 이동 : todo

        -->  npm init

        -->  npm i express

        -->  npm i sequelize sequelize-cli  -->  npx sequelize init

        -->  npm i cookie-parser

        -->  npm i jsonwebtoken

        -->  npm i bcrypt

        -->  npm i nodemon

        -->  package.json 에 "type": "module" 도 정의해주자  -->  script 에 dev 도 작성해주자


===================================================================================================


** 경로 이동 : todo  -->  app.js

        -->  express , cookieParser 두개 import 받아서 사용해주자

        -->  이제 데이터 베이스 연결해줘야한다

        -->  npx sequelize init  -->  config , migrations , models , seeders 폴더 생간다

        ) config : 데이터 베이스 설정하는 것이다  -->  비밀번호 입력하면 된다

        ) migrations : 데이터를 옮기는 것 (데이터에 변동이 발생했을 때 사용하는 폴더)

        ) models : 테이블을 객체로 자동 생성 시켜줄 수 있는것 (sql 쓸 필요 없다)  -->  객체로 모델을 정의할 수 있다

        ) seeders : 기본 디폴트 파일들을 넣는 것 (처음 데이터베이스를 생성하고 연결했을 때 사용하는 폴더)

        ==>  config , models 사용할 것이다


===================================================================================================


** 경로 이동 : config  -->  config.json

        ) config : 데이터베이스를 설정하는 것이다

        -->  password 에 MySQL 설치할 때 정했던 비밀번호로 넣어주자  -->  12345678 (문자열로 넣어줘야한다) 

        -->  database 부분은 이름을 나타낸다  -->  todo 로 바꿔주자

        -->  모두 마쳤으면 이제 데이터베이스가 연결이 될 준비가 된 것이다


** 경로 이동 : models  -->  index.js

        ) models : 테이블을 객체로 자동 생성 시켜줄 수 있는것 (sql 쓸 필요 없다)  -->  객체로 모델을 정의할 수 있다

        -->  데이터베이스 init 되는 코드만 작성해줄 것이다

        -->  싹다 지워주자  -->  config 를 import 받아와서 사용해주자  -->  database , db 만들어주자

        -->  db 설정 모두 마쳤으면, 이제 app.js 에서 import 받아서 사용해주자 (db 연결해준 것이다)


===================================================================================================


** 경로 이동 : app.js

        -->  db.sequelize.sync() 해서 연결시켜주자

        ) sequelize : ORM 의 한 종류이다  -->  객체와 관계형 DB를 맵핑 시켜준다

        -->  npm i mysql2  -->  MySQL 과 연결시켜준 것이다


===================================================================================================


** 경로 이동 : MySQL

        -->  워크벤치 열어줘서 todo 라는 database 만들어주자  -->  create database todo;

        -->  이제 DB 를 정의하면 끝이다


** 경로 이동 : models  -->  user.model.js

        -->  모델을 정의해보자


** 경로 이동 : user.model.js  -->  index.js

        -->  ex) db.Users = Users  -->  앞에서 만든 Users 를 import 받아서 db 에 설치해준 것이다

        -->  워크벤치 들어가보면, 투두 db 에 데이블에 users 생긴 것 확인할 수 있다  -->  sql 쓰지 않고도 데이터베이스와 테이블 만든 것이다

        -->  ORM 은 sql 을 쓰지 않고, 자바스크립트의 객체만으로도 sql 을 쓴것처럼 할 수 있는게 ORM 이다


===================================================================================================


** 경로 이동 : routes  -->  user.js

        -->  post 메소드로 회원가입 요직 만들어주자

        -->  export 해주고, app.js 로 가서 User 라는 이름으로 import 받아서 DB 에 설치해주자


** 경로 이동 : Thunder Client

        -->  body 데이터로 email , password 데이터 보내보고 회원가입 요직 잘 작동하는지 확인해보자
                (똑같은 email 두번 이상 보냈을 때, 이미 존재한다고 뜨면 잘 된 것이다)

        -->  MySQL  -->  select * from todo.users;  -->  비밀번호 암호화되서 값이 들어간 것을 확인할 수 있다

        -->  이렇게 하면 회원가입 db 만드는 것 완료한 것이다


===================================================================================================


==>  프론트엔드 서버  -->  GoDaddy )대표적으로 많이 사용한다  -->  도메인을 구매해서 사용할 수 있다 ex) naver.com 같은 것들 (1년에 25,000원 정도 한다)


===================================================================================================


** 경로 이동 : user.js

        -->  회원가입 로직 만들어줬으니, 이제 로그인 로직 만들어주자

        -->  router.post("/sign-in")  -->  작성해주자


===================================================================================================


** 경로 이동 : user.js

        -->  


===================================================================================================