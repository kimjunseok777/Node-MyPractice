

) express
-->  리액트처럼 간단한 프레임워크, 라이브러리 같은 거라고 생각하면 된다

nodejs 에는 내장되어있는 "http" 라는 모듈이 존재한다  -->  http 모듈이 하는 역할 : 서버를 생성한다
http 라는 모듈이 존재하지만, 다른 도구에 의존해야하는 불편함이 존재한다

express 는 다른 모듈에 의존하지 않고 대부분의 웹 서버 기능을 구현하는 것이 가능하다 (편리하다)


) express 실행 방법

        ) npm init
        package.json 이 있어야한다  -->  npm init  (내가 프로젝트를 시작하고 싶은 폴더 내에서 설치해야한다)
        -->  npm init 했을 때 나오는 것들은 다 enter 누르고 넘기면 된다 (설치된 후에 다 수정 가능하다)

        ) npm i express
        -->  이렇게 까지 하면 설치가 끝난다


===================================================================================================


** 경로 이동 : app.js

        -->  require 사용해서 "express" 가져와줬는데, package.json 수정해서 리액트처럼 import, export 하는 방법으로 바꿔주자 (import 써주는 것이 더 좋다)


** 경로 이동 : app.js  -->  package.json

        -->  마지막에 "type": "module" 이거 추가해주자  -->  이러면 require 대신에 import 를 사용할 수 있다 (대신, 이때부터는 require 사용할 수 없다)


** 경로 이동 : package.json  -->  app.js

        -->  express 를 require 로 가져와줬는데, 이것을 import 로 바꿔줬다

        -->  app.listen 안에 포트 번호와 콜백함수 작성해주자

        -->  app.listen 은 함수이다  -->  app.listen( port , callback )  -->  이 인자 (매개변수) 순서는 중요하다

        -->  ex) app.listen( 3040, () => {} )


===================================================================================================


) 서버 실행 : node app.js (티미널에서 실행)

        -->  자바스크립트 문제풀이 할 때 서버 실행하는 것과 똑같다

        -->  매번 실행할 때마다 node ~ 적어주기 귀찮다  -->  이것도 마찬가지로 package.json 가서 옵션 바꿔주자


** 경로 이동 : package.json

        -->  scripts 에서 "dev" 키값 만들어주고, 우리가 터미널에 서버실행 할 때 적은 명령어 (node app.js) 작성해주자

        -->  이제 npm run dev 하면 서버 실행한다

        -->  npm run dev


) nodemon

        -->  서버 재실행할 필요 없이 코드의 변동이 생기면 저장 단축키로 서버 자동 재실행하게 만들어줄 수 있다 (ctrl + s)

        -->  npm i nodemon

        -->  설치 후에, package.json 의 "dev" 에서 node 부분 nodemon 으로 바꿔주면 끝이다 (nodemon 설치 후에 바꿔줘야한다)

        -->  이제 app.js 에서 저장버튼 누를 때마다 서버 자동 재실행 된다 (편해진다)


===================================================================================================


** 경로 이동 : package.json  -->  app.js

        -->  이제 api 주소를 만들어주자  -->  http://localhost:3040

        -->  ex) app.get("/test", (req, res) => { ... })

        -->  이 주소에 요청하면 기본으로 "start server : 3040" 콘솔에 뜨게 만들어줬다


===================================================================================================


) Thunder Client  (확장 프로그램)

        -->  백엔드에게 요청을 대신해주는 친구이다

        -->  클라이언트 입장에서 백엔드에게 요청하려면 브라우저가 있어야한다  -->  이런 거 없이 백엔드에게 데이터가 잘 갔는지 테스트해볼 수 있는 도구이다

        -->  즉, fetch 나 axios 를 React 같은 코드로 만들어서 사용자 테스트해보고 이러한 과정없이, 백엔드가 테스트해볼 수 있는 것이다

        -->  npm run dev 로 실행시켜준 패키지를 기준으로 작동한다


===================================================================================================


** 경로 이동 : Thunder Client

        -->  New Request 눌러주자

        -->  http://localhost:3040/test  -->  app.js 에서 만들었던 주소와 req 받는 주소 (/test) 작성해주자

        -->  send 보내서 작성한 데이터 잘 뜨는지 확인하자  -->  res.json 에 적었던 데이터가 응답값에 제대로 뜨는지 확인해보자 (프론트에게 전달하는 응답값이다)

        -->  ex)     res.json({ name: req.params.testId })  -->  이게 잘 뜨면 된다  -->  /test/아무거나 입력 (params 이다)


===================================================================================================


** 경로 이동 : app.js

        -->  같은 주소에 메소드 post 로 하나 더 만들어주자

        -->  작성한대로 queryString 으로 전달해보자

        -->  Thunder Client 에서 get 으로도 보내보고, post 로도 보내보자


===================================================================================================


) 인증 로직

        클라이언트가 로그인을 할 때 email 과 password 를 입력하고 백엔드에게 데이터를 요청한다  -->  백엔드는 DB 서버를 뒤져서 같은 회원 정보가 있는지 확인하고
        response 를 보낸다  -->  웹사이트를 이용할 수 있는 출입증을 보내는 것이다  -->  프로필 이미지 같은 것은 암호화할 필요 없지만, 고유식별 번호라면 암호화해서 보내야한다

        암호화 하는 방법 두가지가 있다 : 인증토큰 , 세션

            ) 인증토큰 : 고유값이 암호화된 것  -->  장점은 백엔드가 데이터를 알지 않아도 된다 (가지고 있어야할 데이터가 적어지니 서버에 부담이 적다)
                                                                  -->  단점은 키가 털리고, 알고리즘 암호가 털리면 모든 사용자의 암호가 털리게된다 (보안에 약하다  -->  보안성을 높이고 사용해야한다)

            ) 세션 : key 를 주는 것이다 (값은 백엔드가 가지고 있다) : key 를 통해서 백엔드에 가지고 있는 값을 찾는 것이다
                                                                                                      -->  단점은 값을 백엔드가 가지고 있어야해서 사용자가 많아질 수록 서버의 부담이 커진다
                                                                                                      -->  장점은 key 를 보내기 때문에, 이것이 탈취당해도 안에 아무런 데이터가 없다  -->  즉, 고유번호가 해킹당할 일이 없다
                                                                                                              즉, 세션은 보안이 되게 좋다

            ==>  많이 사용하는 것은 "인증토큰" 이다
                      (인증토큰을 사용하고, 30분만다 고유번호가 바뀐다든지 보안을 높이는 방법들을 추가하는 방식으로 많이 사용한다)

            ==>  우리도 "인증토큰" 사용해서 로그인 만들어볼 것이다

            --------------------------------------------------------------------------------------------------------------

            인증 로직 ex)

            client  --  request( email, password )  -->  back  -- ( email, password ) -->  DB (데이터베이스를 뒤져서 email, password 같은 것을 찾는 것이다)
                        <----------- response -----------
                        response 하는 방법
                        1. 인증토큰 : 고유번호를 암호화하여 클라이언트에게 전달
                        2. 세션 : key 를 사용하여 백엔드에 저장된 데이터를 검색

           ex)
                    const response = {
                        token: 암호화된 값,
                        info: {
                            profile_url: " ",
                            nick: " "
                        }
                    }

            --------------------------------------------------------------------------------------------------------------

            이제 클라이언트는 백엔드에게 token 을 받은 것인데  -->  사이트를 사용하면서 어떠한 요청을 할 때마다 이 token 을 같이 실어서 request 해야한다 (자신임을 증명하는 수단)
            그래서 백엔드에 저장할 때는 반드시 이 token 을 저장해야한다

            token 을 저장하는 방법 : 1. request 의 header 에 넣는 방법
                                                    2. cookie 를 사용하는 방법

            백엔드는 token 을 어디에 저장을할까?  -->  웹에 있는 웹 스토리지에 저장한다 (전역상태로 갖고 있으면 새로고침할 때마다 로그아웃 돼버린다)
                                                                           -->  웹 스토리지에에 토큰을 저장하고, 여기서 state 변수로 변형해서 사용하는 것이다

            --------------------------------------------------------------------------------------------------------------

            ) 인증 토큰 : 여러분을 증명하는 수단, 암호화된 값, 생명주기 짧은 편 (보안성을 위해서 인증토큰 만료 기간을 짧게 설정하기 때문이다)
                    -->  보안성이 좋지 않기 때문에 생명주기를 짧게 만드는 것이다
                    -->  증명하든 수단  -->  ex) 이 게시글을 작성한 사람은 "김준석" 입니다 , "김준석" 님이 프로필을 변경하였습니다 ... 등등

                    back 이 발급하고  -->  client 가 다시 back 에게 전달해야한다 (req 보낼 때 token 을 실어서 같이 보내는 것)
                    back(발급)  -->  client  -->  back(전달)

            ) 리프레시 토큰 : 인증 토큰을 재발급 받는 수단, 생명주기 긴편 (보안성이 강하다)


===================================================================================================


** 경로 이동 : app.js

        -->  바디데이터, 파람, 쿼리스트링 ... 등등, req 매개변수로 데이터를 받아보는 것을 해볼 것이다 / 메소드마다의 모듈화를 해볼 것이다

        -->  app.get , app.post 에다가 각각 req.params , req.query 작성해주자


** 경로 이동 : Thunder Client

        -->  POST) Query 로 가서 파라미터에 testId 와 value 에 숫자 아무렇게 입력해주면, send 할 주소값이 연동되어 자동으로 바뀐다

        -->  GET) 주소에 "/test/3" 작성해서 데이터 보내보자


===================================================================================================


** 경로 이동 : app.js

        -->  Thunder Client 에서 body 데이터로 이메일과 비밀번호 보냈는데, undefined 가 찍힌다  -->  바디데이터로 보낸 데이터를 파싱할 수 있게 해줘야한다

        -->  ex) app.use(express.json())

        -->  위 코드 작성해준 후에, Thunder Client 에서 email 과 password 를 body 에 만들어서 send 하면 콘솔 잘 찍힌다 (body 데이터 콘솔 찍히는지 확인하자)


===================================================================================================


** 경로 이동 : routes  -->  user.js

        -->  React 에서 경로 설정했던 것처럼, 이것도 마찬가지로 경로 만들어줄 것이다

        -->  router 를 export 해준 것을 app.js 로 가서 import 해서 사용해주자 (import 받을 때 .js 까지 풀네임으로 작성해야한다)

        -->  ex) app.use('/user', user)  -->  "/user" 이것은 주소 기본값 설정해준 것이다

        -->  이제 기능 따라 구분을 해서 넣으면 되는 것이다  -->  ex) app.use('/todo', todo)  -->  투두면 이렇게 하면 된다

        -->  이렇게 모듈화 시키면 된다  -->  기능별로 분리가 되니까 유지보수가 쉽다 (user, todo 분리한 것처럼 기능 분리)


** 경로 이동 : Thunder Client

        -->  router.post 만들어준 것 데이터 요청하고 응답해보자

        -->  http://localhost:3040/user/sign-up  -->  body 데이터에 email, password 아무거나 적어서 보내보자  -->  res 데이터 잘 뜨는지 확인해보자

        -->  이렇게 하면 routes 로 연결하는 것가지 다 해본 것이다  -->  이제 투두에 회원가입을 실제로 시키고, 회원가입이 정상적으로 이뤄졌으면 로그인 까지 해보자

        -->  express 폴더 닫고, todo 폴더로 이동해주자 (실제로 로그인, 회원가입 로직 만들어보고, 투두페이지도 만들어볼 것이다)


===================================================================================================


** 경로 이동 : todo  -->  server.txt


===================================================================================================